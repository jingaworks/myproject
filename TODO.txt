/main
  ├── main.c
  ├── CMakeLists.txt
/components
  ├── jw_wifi
  │   ├── jw_wifi.c
  │   ├── include
  │   │   └── jw_wifi.h
  │   └── CMakeLists.txt
  ├── jw_server
  │   ├── jw_server.c
  │   ├── include
  │   │   └── jw_server.h
  │   └── CMakeLists.txt
  ├── jw_rtc
  │   ├── jw_rtc.c
  │   ├── include
  │   │   └── jw_rtc.h
  │   └── CMakeLists.txt

can you make the jw_server module with the functionality in the new jw_server.c/.h attached to this post.
apply all requirements to new jw_server module, checks, optimization, robustnees, performance,...
do not edit keep_alive.c/.h files.
I have the html files.
do not remove functionality from new files.
integrate new functionality with other modules.
refactor all modules are using jw_server module.
as a side note:
  can you hold a list[multiple] of commands, rules?
  - I want to add commands to the list, 
  - I want to add rules to the list, 
  - I want to execute all commands from the list.
  - I want to apply all rules from the list.
can i do that?


#################################################
#################################################

Please check again, main.c and all modules[jw_log, jw_rtc, jw_sdcard, jw_server, jw_wifi], for errors and integration with each other.
Update CMakeLists.txt files and remove all comments and descriptions.
Update all modules .c and .h files with detailed function block comments and prototypes and descriptions/comments for all variables, structs, enums,...
print main.c.
print jw_log, jw_rtc, jw_sdcard, jw_server, jw_wifi modules.
We are going further with esp-now, after I upload the files.

#################################################


question without update on files. OK?
beside the jw_espnow module, there would be a jw_devices module. Let me tell you more info about jw_devices module. it would be used with jw_espnow. devices are esp-now peers. 
jw_devices holds devices logic while jw_espnow handle connectivity part, is this a good idea?
Devices have 'device info[type, name, status, state,...]',  'device settings[according to device type: 'sensor type has sensor subtype' 'relay type' 'switch type']' and received data[if type is sensor] .(sensors data that would be saved on sdcard under '/sdcar/devices/[mac_addr]/data/[year month day]_data.txt')
I would upload some files, do nothing, no updates.
We discuses first, what you are going to do and how you are going to do it. You start editing when I tell you 'build jw_espnow module' or 'build jw_devices module'


#################################################

You will continue a esp-idf project, in C language, with multiple modules.
I have the following file and modules: [main.c, jw_common, jw_log, jw_rtc, jw_sdcard, jw_server, jw_wifi].
The project structure is:
/main/main.C
/components/
jw_common/include/jw_common.h
jw_log/include/jw_log.h
jw_log/jw_log.c
jw_rtc/include/jw_rtc.h
jw_rtc/jw_rtc.c
jw_sdcard/include/jw_sdcard.h
jw_sdcard/jw_sdcard.c
jw_server/include/jw_server.h
jw_server/jw_server.c
jw_wifi/include/jw_wifi.h
jw_wifi/jw_wifi.c

More files to come.

Wait until I tell you "start the project" then we will start working on this project. 
Unitl then, wait for more files.


Please save a alpha version for the project files I have uploaded reference point [rollback poin] of a (working version).



[jw_common, jw_log, jw_rtc, jw_sdcard, jw_server, jw_wifi, jw_espnow and jw_devices]. 

We have to build [jw_devices and jw_espnow] modules from existing code.

Please use best practices and improve modularity, readability and performance. 
This project do uses SPIRAM, please add functionality (ex: heap_ style memory allocation). 
Please do not start working on this project until I tell you "build the project". 
I have to attach all files first. 
You will analyze the provided files and use them as example for this project. 
Do not remove functionality. 
Reduce dependency between modules. improve the performance of the code and readability of this project. 
Please use best practices and improve modularity, readability and performance. 
Rename functions, variables, structs and enums for better readability and performance. 
In .h files, add prefix jw_ to function, structs and enums. 
Remove #pragma once guard and add #ifndef and #def guards style. 
Wait until I tell you "build the project". 




#################################################

Brainstorm how to do a jw_devices and jw_espnow modules from the files I have provided [jw_devices.c/.h and jw_espnow.c/.h]. 
Do not start to work on them, wait until I tell you "build the project"

#################################################

Wait for the command, first I have to upload all files.

#################################################

info:
There would be two new modules that are related to each other, jw_devices and jw_espnow module.
Let me tell you more info about jw_devices module. it would be used with jw_espnow. devices are esp-now peers. 
jw_devices holds devices logic while jw_espnow handle connectivity part.
Devices have 'device info[type, name, status, state,...]',  'device settings[according to device type: 'sensor type has sensor subtype' 'relay type' 'switch type']' and received data[if type is sensor] .(sensors data that would be saved on sdcard under '/sdcar/devices/[mac_addr]/data/[year month day]_data.txt')
We discuses first, what you are going to do and how you are going to do it.

Brainstorm how to do a jw_devices and jw_espnow modules from the files I have provided [jw_devices.c/.h and jw_espnow.c/.h]. 
Let me know what is the best approach for this two modules we have build, just details, no file updates.
Tell me different versions and I would chose.
You start editing the new modules when I tell you "start the project"

now you can start the project 

#################################################

jw_devices_set_switch_state(mac_addr, bool state, bool manual): Update switch state with manual override option.
we cant do that. we only get state direct from switch device type. this state is used internaly by program.

#################################################


